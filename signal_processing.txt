import pyaudio as pa
import struct
import numpy as np
import matplotlib.pyplot as plt

# Constants
CHUNK = 1024 * 2       # Number of samples per second
FORMAT = pa.paInt16    # Audio format (16-bit)
CHANNELS = 1           # Number of audio channels (mono)
RATE = 44100           # Sampling rate in Hz

# Initialize PyAudio and stream
p = pa.PyAudio()
stream = p.open(
    format=FORMAT,
    channels=CHANNELS,
    rate=RATE,
    input=True,
    output=True,
    frames_per_buffer=CHUNK
)

# Read initial chunk of data and convert to integer format
data = stream.read(CHUNK)
dataInt = struct.unpack(str(CHUNK) + 'h', data)

# Set up plot
fig, (ax, ax1) = plt.subplots(2)
x_fft = np.linspace(0, RATE, CHUNK)
x = np.arange(0, 2 * CHUNK, 2)
line, = ax.plot(x, np.random.rand(CHUNK), 'r')
line_fft, = ax1.semilogx(x_fft, np.random.rand(CHUNK), 'r')

# Plot settings
ax.set_ylim(-32000, 32000)
ax.set_xlim(0, CHUNK)
ax1.set_ylim(0, 1)
ax1.set_xlim(20, RATE / 2)

# Display the plot in non-blocking mode
plt.show(block=False)

# Real-time plotting loop
while True:
    data = stream.read(CHUNK)
    dataInt = struct.unpack(str(CHUNK) + 'h', data)
    line.set_ydata(dataInt)
    line_fft.set_ydata(np.abs(np.fft.fft(dataInt)) * 2 / (33000 * CHUNK))
    
    # Update plot
    fig.canvas.draw()
    fig.canvas.flush_events()
    plt.pause(0.01)  # small pause to allow GUI event processing
